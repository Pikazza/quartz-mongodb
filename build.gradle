buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'net.researchgate.release' version '3.0.2'
    id 'com.sourcemuse.mongo' version '1.0.7'
}

allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'java'
}

apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'com.sourcemuse.mongo'

archivesBaseName = 'quartz-mongodb'

jar {
    archiveVersion = projectVersion
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    provided
    implementation.extendsFrom provided
}
sourceSets {
    main { compileClasspath += configurations.provided }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources true
        downloadJavadoc true
    }
    jdt {
        sourceCompatibility java.sourceCompatibility
        targetCompatibility java.targetCompatibility
    }
}

dependencies {
    implementation("org.quartz-scheduler:quartz:2.3.2")
    implementation("org.mongodb:mongodb-driver-sync:4.11.1")
    implementation("commons-codec:commons-codec:1.16.1")
    implementation("org.apache.commons:commons-lang3:3.8")
    implementation("org.apache.httpcomponents:httpcore:4.4.16")
    implementation("org.slf4j:slf4j-api:1.7.21")

    compileOnly("org.clojure:clojure:1.10.0")

    testImplementation("org.clojure:clojure:1.10.0")
    testImplementation("joda-time:joda-time:2.8.2")
    testImplementation("org.slf4j:slf4j-simple:2.0.12")
    testImplementation("org.codehaus.groovy:groovy-all:2.5.12")
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5")
    testRuntimeOnly("cglib:cglib-nodep:3.1")
    testRuntimeOnly("org.objenesis:objenesis:2.1")
}

release {
    scmAdapters = [net.researchgate.release.GitAdapter]
    git {
        pushToRemote = 'origin'
    }

    versionPropertyFile = 'gradle.properties'
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    jar.reproducibleFileOrder = true
    jar.preserveFileTimestamps = false
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        quartzMongoDB(MavenPublication) {
            groupId    = 'com.mongo-quartz'
            artifactId = archivesBaseName
            version    = projectVersion

            artifact sourceJar {
                archiveClassifier = "sources"
            }

            from components.java
        }
    }
}

mongo {
    port 27017
    logging 'console'
    journalingEnabled true
}

test {
 beforeTest { descriptor ->
    logger.lifecycle("Running test \"${descriptor}\"")
 }
}

// force test runs even when there are no test changes,
// such test loops are very useful for testing race conditions
// and other concurrency hazards
test.outputs.upToDateWhen { false }

tasks.withType(Test){
    runWithMongoDb = true
    mongo {
        journalingEnabled true
        port 27017
        logging 'console'
        mongoVersion 'PRODUCTION'
    }
}
